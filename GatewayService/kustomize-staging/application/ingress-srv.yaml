apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-api-srv
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production  
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - staging.hyves.social
    secretName: hyves-social-api-tls
  rules:
    - host: staging.hyves.social
      http:
        paths:
          - path: /api/users
            pathType: Prefix
            backend:
              service:
                name: user-clusterip-srv
                port:
                  number: 80
          - path: /api/profiles
            pathType: Prefix
            backend:
              service:
                name: profile-clusterip-srv
                port:
                  number: 80
          - path: /api/krabbels
            pathType: Prefix
            backend:
              service:
                name: krabbel-clusterip-srv
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-srv
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production  
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/auth-url: "https://staging.hyves.social/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://staging.hyves.social/oauth2/start?rd=$escaped_request_uri"
    nginx.ingress.kubernetes.io/auth-response-headers:  "Authorization, X-Auth-Request-Email, X-Auth-Request-User, X-Forwarded-Access-Token"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $token $upstream_http_x_auth_request_access_token;
      add_header "Authorization: Bearer $token";
spec:
  tls:
  - hosts:
    - staging.hyves.social
    secretName: hyves-social-tls
  rules:
    - host: staging.hyves.social
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-clusterip-srv
                port:
                  number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oauth2-proxy
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-production
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    # nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE"
    # nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   more_set_headers "Access-Control-Allow-Origin: $http_origin";
spec:
  tls:
  - hosts:
    - staging.hyves.social
    secretName: hyves-social-oauth-tls
  rules:
  - host: staging.hyves.social
    http:
      paths:
      - path: /oauth2
        pathType: Prefix
        backend:
          service:
            name: oauth2-proxy
            port:
              number: 4180